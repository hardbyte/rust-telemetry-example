name: Rust Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Docker Compose
        run: |
          docker compose --version

      - name: Check Docker Compose file
        run: |
          echo "Using Docker Compose with profiles for CI"
          grep -q "profiles:" docker-compose.yaml && echo "Profiles are configured in docker-compose.yaml" || echo "Warning: No profiles found in docker-compose.yaml"

      - name: Start DB and Kafka
        run: |
          docker compose --profile ci up -d --wait --timeout 120 \
          || (echo "Docker compose up --wait failed. Dumping Kafka logs:" && docker compose logs kafka && exit 1)
          
          docker compose ps

      - name: Wait for services to be healthy
        run: |
          DB_HEALTH=$(docker inspect --format "{{.State.Health.Status}}" $(docker compose ps -q db))
          KAFKA_HEALTH=$(docker inspect --format "{{.State.Health.Status}}" $(docker compose ps -q kafka))
          
          if [ "$DB_HEALTH" != "healthy" ] || [ "$KAFKA_HEALTH" != "healthy" ]; then
            echo "Services did not become healthy in time."
            echo "DB Status: $DB_HEALTH"
            echo "Kafka Status: $KAFKA_HEALTH"
            docker compose logs db
            docker compose logs kafka
            exit 1
          else
            echo "DB and Kafka are healthy."
          fi
      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgres://postgres:password@localhost:5432/bookapp" > .env
          echo "KAFKA_BOOTSTRAP_SERVERS=localhost:9092" >> .env

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features native-tls,postgres

      - name: Run database migrations
        run: |
          cd bookapp
          sqlx database create
          sqlx migrate run
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/bookapp

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/bookapp
          KAFKA_BOOTSTRAP_SERVERS: localhost:9092

      - name: Stop Docker Compose
        if: always() # Run even if the tests fail
        run: docker compose --profile ci down
