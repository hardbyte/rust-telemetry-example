services:

  app:
    profiles: [default]
    build: .
    environment:
      DATABASE_URL: "postgres://postgres:password@db:5432/bookapp"
      OTEL_SERVICE_NAME: "bookapp"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://telemetry:4317
      TRACE_SAMPLE_PROBABILITY: 1.0
      KAFKA_BROKER_URL: "kafka:9092"
      ENABLE_KAFKA_PRODUCER: "true"
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: "development"
      SENTRY_RELEASE: "bookapp@1.0.0"
    ports:
      - "8000:8000"
      - "6669:6669"
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy

  backend:
    profiles: [default]
    build: .
    environment:
      DATABASE_URL: "postgres://postgres:password@db:5432/bookapp"
      OTEL_SERVICE_NAME: "backend"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://telemetry:4317
      TRACE_SAMPLE_PROBABILITY: 1.0
      KAFKA_BROKER_URL: "kafka:9092"
      ENABLE_KAFKA_CONSUMER: "true"
      ENABLE_KAFKA_PRODUCER: "true"
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: "development"
      SENTRY_RELEASE: "backend@1.0.0"
    ports:
      - "8001:8000"
    depends_on:
      app:
        condition: service_started
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy


  db:
    profiles: [ci, default]
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: bookapp
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    profiles: [ci, default]
    image: bitnami/kafka:latest
    environment:
      # KRaft mode configuration (no ZooKeeper needed)
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    healthcheck:
      test: ["CMD", "/opt/bitnami/kafka/bin/kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ports:
      - "9092:9092"


  telemetry:
    profiles: [default]
    image: grafana/otel-lgtm:0.11.5
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "cat", "/tmp/ready"]
      timeout: 30s
      retries: 10
    environment:
      ENABLE_LOGS_OTELCOL: 'true'
      GF_AUTH_ANONYMOUS_ORG_NAME: 'Main Org.'
      GF_AUTH_DISABLE_LOGIN_FORM: 'true'
      ENABLE_LOGS_PROMETHEUS: 'true'
      # other environment variables can be set here e.g., if otelcol is forwarding to Axiom:
      #AXIOM_API_KEY: ''
    ports:
      - "4317:4317"
      - "4318:4318"
      - "3000:3000"
    volumes:
      - ./telemetry-config/tempo-config.yaml:/otel-lgtm/tempo-config.yaml
      - ./telemetry-config/otelcon-config.yaml:/otel-lgtm/otelcol-config.yaml
      - ./telemetry-config/grafana-dashboards.yaml:/otel-lgtm/grafana/conf/provisioning/dashboards/grafana-dashboards.yaml
      - ./telemetry-config/dashboards:/otel-lgtm/dashboards
      - ./telemetry-config/alerts:/otel-lgtm/grafana/conf/provisioning/alerting
      # Required for docker stats
      - /var/run/docker.sock:/var/run/docker.sock
