receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  prometheus/collector:
    config:
      scrape_configs:
        - job_name: 'opentelemetry-collector'
          static_configs:
            - targets: ['localhost:8888']

  kafkametrics:
    brokers: kafka:9092
    protocol_version: 2.0.0
    scrapers:
      - brokers
      - topics
      - consumers
    collection_interval: 10s

  postgresql:
    endpoint: db:5432
    tls:
      insecure: true
    username: postgres
    password: password
    collection_interval: 10s
    connection_pool:
      max_idle_time: 10m
      max_lifetime: 0
      max_idle: 2
      max_open: 2

  sqlquery/metrics:
    collection_interval: 10s
    datasource: "postgresql://postgres:password@db/bookapp?sslmode=disable"
    driver: postgres
    initial_delay: 5s
    queries:
      - sql: |-
          select count(*) as count from books
        metrics:
          - metric_name: bt.sql_books_count
            value_column: "count"

processors:
  resourcedetection:
    detectors: [ env, system ]
  batch:
    timeout: 10s

exporters:
  otlphttp/metrics:
    endpoint: http://localhost:9090/api/v1/otlp
    tls:
      insecure: true
  otlphttp/traces:
    endpoint: http://localhost:4418
    tls:
      insecure: true
  otlphttp/logs:
    endpoint: http://localhost:3100/otlp
    tls:
      insecure: true
  logging/metrics:
    verbosity: detailed
  logging/traces:
    verbosity: detailed
  logging/logs:
    verbosity: detailed

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlphttp/traces]
    metrics:
      receivers:
        - otlp
        - prometheus/collector
        - kafkametrics
        - postgresql
        - sqlquery/metrics
      processors: [batch]
      exporters: [otlphttp/metrics]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlphttp/logs]
