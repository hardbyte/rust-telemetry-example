# Rust Telemetry Example Environment Configuration
# Copy this file to .env and configure the values for your environment

# =============================================================================
# SENTRY CONFIGURATION (Optional - for error tracking)
# =============================================================================
# Get your DSN from https://sentry.io/settings/projects/YOUR_PROJECT/keys/
# SENTRY_DSN=https://your-key@sentry.io/your-project-id

# Sentry environment identifier
SENTRY_ENVIRONMENT=development

# Sentry release version for tracking deployments
SENTRY_RELEASE=bookapp@dev

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
# OpenTelemetry service name
OTEL_SERVICE_NAME=bookapp

# OpenTelemetry Collector endpoint
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

# Database connection string (automatically set by Docker Compose)
# DATABASE_URL=postgres://postgres:password@db:5432/bookapp

# =============================================================================
# KAFKA CONFIGURATION
# =============================================================================
# Kafka broker URL
KAFKA_BROKER_URL=kafka:9092

# Kafka consumer group ID
KAFKA_GROUP_ID=backend_consumer_group

# Feature toggles for Kafka functionality
ENABLE_KAFKA_CONSUMER=true
ENABLE_KAFKA_PRODUCER=true

# =============================================================================
# INTEGRATION TESTING CONFIGURATION (Optional)
# =============================================================================
# Test service configuration
# EXPECTED_SERVICE_NAME=bookapp
# EXPECTED_SPAN_NAME=HTTP GET /books

# Test endpoint URLs
# APP_BASE_URL=http://localhost:8000
# TELEMETRY_BASE_URL=http://localhost:3000
# TEMPO_DIRECT_URL=http://localhost:3200

# Test endpoint paths
# BOOKS_ENDPOINT=/books

# Test timing configuration
# TRACE_PROPAGATION_WAIT_SECS=3
# LOG_LOOKBACK_SECS=300

# Grafana datasource IDs
# PROMETHEUS_DATASOURCE_ID=1
# TEMPO_DATASOURCE_ID=2
# LOKI_DATASOURCE_ID=3

# Custom Prometheus query for testing
# PROMETHEUS_QUERY=sum(traces_spanmetrics_calls_total{service="bookapp", span_kind="server", span_name="HTTP GET /books", trace_id="{trace_id}"}) by (span_name)